generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MemberStatuses {
  ACTIVE
  FROZEN
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
}

enum SpaceTransactionDeposit {
  // Magically appears. For data migraiton and corrections.
  MAGIC

  // Donation from Member or 3-rd party person
  DONATE

  // Membership fee
  MEMBERSHIP
}

enum SpaceTransactionWithdrawal {
  // Magically disappears. For data migraiton and corrections.
  MAGIC

  // Basic needs, such as rent, utilities, ISP, etc..
  BASIC

  // Non-recurrent purchases
  PURCHASES
}

model Member {
  id                          String                       @id @default(uuid())
  name                        String
  email                       String                       @unique
  status                      MemberStatuses               @default(ACTIVE)
  joinedAt                    DateTime                     @default(now())
  ExternalAuthenticationAuth0 ExternalAuthenticationAuth0?
  ExternalAuthenticationOry   ExternalAuthenticationOry?
  SpaceTransaction            SpaceTransaction[]
}

model ExternalAuthenticationAuth0 {
  auth0Id  String @id @unique
  memberId String @unique
  member   Member @relation(fields: [memberId], references: [id])
}

model ExternalAuthenticationOry {
  oryId    String @id @unique
  memberId String @unique
  member   Member @relation(fields: [memberId], references: [id])
}

model Balance {
  entityId String @id @unique
  amount   Int
}

model SpaceTransaction {
  id      String          @id @default(uuid())
  type    TransactionType
  amount  Int
  comment String?
  date    DateTime        @default(now())

  // Who created this transaction. Null if created automatically.
  actorId String?

  // For Deposit transactions, source of funds
  source SpaceTransactionDeposit?

  // For Withdrawal transactions, funds target
  target SpaceTransactionWithdrawal?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  Actor Member? @relation(fields: [actorId], references: [id])
}
