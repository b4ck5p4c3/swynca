generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MemberStatuses {
  ACTIVE
  FROZEN
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
}

enum KeyType {
  // Bank card number
  PAN

  // Another identity (any key has)
  UID
}

enum SpaceTransactionDeposit {
  // Magically appears. For data migraiton and corrections.
  MAGIC

  // Donation from Member or 3-rd party person
  DONATE

  // Membership fee
  MEMBERSHIP
}

enum SpaceTransactionWithdrawal {
  // Magically disappears. For data migraiton and corrections.
  MAGIC

  // Basic needs, such as rent, utilities, ISP, etc..
  BASIC

  // Non-recurrent purchases
  PURCHASES
}

model Member {
  id       String         @id @default(uuid())
  name     String
  email    String         @unique
  username String         @unique
  status   MemberStatuses @default(ACTIVE)
  joinedAt DateTime       @default(now())

  ExternalAuthenticationLogto   ExternalAuthenticationLogto?
  SpaceTransaction              SpaceTransaction[]
  ACSKey                        ACSKey[]
  MembershipSubscriptionHistory MembershipSubscription[]
}

model ACSKey {
  id        String   @id @default(uuid())
  memberId  String
  type      KeyType
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  member    Member   @relation(fields: [memberId], references: [id])
}

model ExternalAuthenticationLogto {
  logtoId    String @id @unique
  memberId String @unique
  member   Member @relation(fields: [memberId], references: [id])
}

model Balance {
  entityId String  @id @unique
  amount   Decimal @db.Decimal(18, 2)
}

model SpaceTransaction {
  id      String          @id @default(uuid())
  type    TransactionType
  amount  Decimal         @db.Decimal(18, 2)
  comment String?
  date    DateTime        @default(now())

  // Who created this transaction. Null if created automatically.
  actorId String?

  // For Deposit transactions, source of funds
  source SpaceTransactionDeposit?

  // For Withdrawal transactions, funds target
  target SpaceTransactionWithdrawal?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  Actor Member? @relation(fields: [actorId], references: [id])
}

model Membership {
  id                     String                   @id @unique @default(uuid())
  title                  String
  amount                 Decimal                  @db.Decimal(18, 2)
  active                 Boolean
  MembershipSubscription MembershipSubscription[]
}

model MembershipSubscription {
  id           String     @id @unique @default(uuid())
  subscribedAt DateTime   @default(now())
  declinedAt   DateTime?
  membershipId String
  membership   Membership @relation(fields: [membershipId], references: [id])
  memberId     String
  member       Member     @relation(fields: [memberId], references: [id])
}
